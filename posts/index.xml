<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Victor Yuan</title>
<link>https://victoryuan.com/posts/</link>
<atom:link href="https://victoryuan.com/posts/index.xml" rel="self" type="application/rss+xml"/>
<description>Victor&#39;s website</description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Fri, 03 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>2025 Posit Plotnine and Great Tables Contest Submission</title>
  <dc:creator>Victor Yuan</dc:creator>
  <link>https://victoryuan.com/posts/2025-10-03-2025-posit-plotnine-and-great-tables-contest/</link>
  <description><![CDATA[ 




<p>On August 21 2025, Posit announced the <a href="https://posit.co/blog/announcing-the-2025-table-and-plotnine-contests/">2025 Table and Plotnine contests</a>. I was always impressed with the resulting submissions from previous years, so this year I decided to participate.</p>
<p>Initially, I decided that the <code>plotnine</code> contest sounded like a great opportunity to see how to use the python port of <code>ggplot2</code>. I had no experience with plotnine, but lots with ggplot2.</p>
<p>However, after finishing my submission for <code>plotnine</code>, I turned my attention to the table contest. I wasn’t certain if I had the time to make another high quality submission. But I felt that I had a great idea that I haven’t seen done before. So I reconsidered and decided to make a smaller single post entry for the table contest.</p>
<section id="exploring-canada-job-market-data-with-plotnine" class="level1">
<h1>Exploring Canada Job Market Data with <code>plotnine</code></h1>
<p>For the 2025 plotnine contest, I wanted to explore official Canadian labour statistics using Plotnine.</p>
<p>Using quarto, I created a website, which hosts the <a href="https://victoryuan.com/labourcan/">final submitted visualization</a>, and a <a href="https://victoryuan.com/labourcan/02_develop_visualization.html">tutorial</a> on how I developed the visualization.</p>
<p>The visualization uses the plotnine, which is a visualization library from python, heavily inspired by the grammar of graphics. I used <code>polars</code> to crunch the data.</p>
<p><img src="https://victoryuan.com/posts/2025-10-03-2025-posit-plotnine-and-great-tables-contest/labourcan.gif" class="img-fluid"></p>
</section>
<section id="coronavirus-spike-proteins-with-r-gt" class="level1">
<h1>Coronavirus Spike Proteins with <code>r-gt</code></h1>
<p>For the 2025 Posit Table contest I wanted to explore how MSAs can be effectively visualized using the r package gt. This has been something I have wanted to do for a long time, and felt like this would be great way to share some of the exploration with the community.</p>
<p><a href="https://victoryuan.com/2025-posit-table-contest-gt-msa/">submission</a></p>
<p><img src="https://victoryuan.com/posts/2025-10-03-2025-posit-plotnine-and-great-tables-contest/msa.gif" class="img-fluid"></p>


</section>

<script data-goatcounter="https://victor2wy.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script> ]]></description>
  <category>R</category>
  <category>data visualization</category>
  <category>bioinformatics</category>
  <guid>https://victoryuan.com/posts/2025-10-03-2025-posit-plotnine-and-great-tables-contest/</guid>
  <pubDate>Fri, 03 Oct 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Programmatically creating tabsets in R</title>
  <link>https://victoryuan.com/posts/2025-03-28-dynamic-navsets/</link>
  <description><![CDATA[ 




<p><img src="https://victoryuan.com/posts/2025-03-28-dynamic-navsets/shinylive.gif" class="img-fluid"></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I recently was working on a web app and encountered a situation where I wanted to create tabs based on some variable in a data frame. The tab names and content would change when the data was subsetted or modified from other functions in the app.</p>
<p>Here is how to do that in shiny, using the <a href="https://allisonhorst.github.io/palmerpenguins/">palmerpenguins</a> dataset as an example.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bslib)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(penguins)</span>
<span id="cb1-9">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span></code></pre></div></div>
</div>
</section>
<section id="setting-up-the-ui" class="level1">
<h1>Setting up the UI</h1>
<p>First I set up the ui with two components:</p>
<ul>
<li>an input component that filters the dataset, and</li>
<li>a <code>uiOutput</code> component for the dynamic tabs which will be rendered server-side</li>
</ul>
<p>The filter component is just to demonstrate how the tabsets are generated based on different subsetted versions of the underlying data.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fillable</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">radioButtons</span>(</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select_species"</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filter by species"</span>,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(penguins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species)</span>
<span id="cb2-6">  ),</span>
<span id="cb2-7">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dynamic_navset_card"</span>)</span>
<span id="cb2-8">)</span></code></pre></div></div>
</div>
<section id="render-the-tab-names-and-content-server-side" class="level2">
<h2 class="anchored" data-anchor-id="render-the-tab-names-and-content-server-side">Render the tab names and content server-side</h2>
<p>Next is the server code. The server code does 3 things:</p>
<ol type="1">
<li>filter the penguins dataset <code>penguin_filtered</code>, based on the radio buttons</li>
<li>dynamically render the ui component based on the <code>island</code> column in the filter penguin dataset i.e.&nbsp;<code>penguin_filtered$island</code></li>
<li>Create content for each tab, here I chose a histogram over year.</li>
</ol>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(session, input, output) {</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. filter by species</span></span>
<span id="cb3-3">  penguins_filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>select_species)</span>
<span id="cb3-5">    penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>select_species)</span>
<span id="cb3-6">  })</span>
<span id="cb3-7"></span>
<span id="cb3-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. create the ui based on the `island` column</span></span>
<span id="cb3-9">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dynamic_navset_card <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb3-10">    nav_items <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">penguins_filtered</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>island) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb3-11">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav_panel</span>(</span>
<span id="cb3-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> .x,</span>
<span id="cb3-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotOutput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_{.x}"</span>))</span>
<span id="cb3-14">      )</span>
<span id="cb3-15">    )</span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navset_card_pill</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>nav_items)</span>
<span id="cb3-17">  })</span>
<span id="cb3-18"></span>
<span id="cb3-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. create the plots</span></span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb3-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb3-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">penguins_filtered</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>island),</span>
<span id="cb3-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb3-24">        id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plot_{x}"</span>)</span>
<span id="cb3-25">        output[[id]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb3-26">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">penguins_filtered</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-27">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(island <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-28">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-29">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-30">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of penguins by year for island {x}"</span>))</span>
<span id="cb3-31">        })</span>
<span id="cb3-32">      }</span>
<span id="cb3-33">    )</span>
<span id="cb3-34">  })</span>
<span id="cb3-35">}</span></code></pre></div></div>
</div>
<p>The tricky part is figuring out how to dynamically assign the output ids. Here, I programmatically create the <code>id</code>s and then assign them content (plots) based on the relevant subset of data.</p>
</section>
</section>
<section id="shinylive-app" class="level1">
<h1>Shinylive app</h1>
<p>Here is a demonstration with a shinylive app</p>
<pre class="shinylive-r" data-engine="r"><code>#| '!! shinylive warning !!': |
#|   shinylive does not work in self-contained HTML documents.
#|   Please set `embed-resources: false` in your metadata.
#| standalone: true
#| viewerHeight: 400
library(bslib)
library(dplyr)
library(purrr)
library(shiny)
library(glue)
library(ggplot2)
library(palmerpenguins)
data(penguins)
ggplot2::theme_set(theme_bw(15))

ui &lt;- bslib::page_sidebar(
  sidebar = sidebar(
    radioButtons(
      "select_species",
      "Filter by species",
      choices = unique(penguins$species)
    )
  ),
  shiny::uiOutput("dynamic_navset_card")
)

server &lt;- function(session, input, output) {
  # 1. filter by species
  penguins_filtered &lt;- reactive({
    req(input$select_species)
    penguins |&gt; filter(species == input$select_species)
  })

  # 2. create the ui based on the `island` column
  output$dynamic_navset_card &lt;- renderUI({
    nav_items &lt;- unique(penguins_filtered()$island) |&gt; purrr::map(
      ~ nav_panel(
        title = .x,
        plotOutput(glue("plot_{.x}"), width = "80%")
      )
    )
    navset_card_pill(!!!nav_items, height = 360)
  })

  # 3. create the plots
  observe({
    walk(
      unique(penguins_filtered()$island),
      function(x) {
        id &lt;- glue("plot_{x}")
        output[[id]] &lt;- renderPlot({
          penguins_filtered() |&gt;
            filter(island == x) |&gt;
            ggplot(aes(x = year)) +
            geom_histogram(stat = "count") +
            labs(title = glue("Number of penguins by year for island {x}"))
        })
      }
    )
  })
}
shiny::shinyApp(ui, server)</code></pre>


</section>

<script data-goatcounter="https://victor2wy.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script> ]]></description>
  <category>R</category>
  <category>quarto</category>
  <guid>https://victoryuan.com/posts/2025-03-28-dynamic-navsets/</guid>
  <pubDate>Fri, 28 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Making a Twitter Bot in the Year 2024</title>
  <dc:creator>Victor Yuan</dc:creator>
  <link>https://victoryuan.com/posts/2024-06-12-making-a-twitter-bot-in-the-year-2024/</link>
  <description><![CDATA[ 




<section id="i-made-a-twitter-bot-the-bc-child-care-bot" class="level2">
<h2 class="anchored" data-anchor-id="i-made-a-twitter-bot-the-bc-child-care-bot">I made a Twitter bot, the <a href="https://botsin.space/@bcchildcarebot">BC Child Care Bot</a></h2>
<p>Except, because it is 2024, using Twitter is uncool, so what I actually did instead was, <a href="https://github.com/wvictor14/bcchildcarebot">I made a Mastodon Bot</a>. It’s powered by github actions, meaning everyday it automatically pulls data from BC open map data, detects new vacancies using R, and sends a “toot” (that’s the mastodon word for “tweet”) to <a href="https://botsin.space/@bcchildcarebot">this account</a>.</p>
</section>
<section id="what-is-mastodon" class="level2">
<h2 class="anchored" data-anchor-id="what-is-mastodon">What is Mastodon</h2>
<p>If you’re like me and were not an avid Twitter user in the first place, you probably have never heard of Mastodon.</p>
<p>Well, Mastodon is basically Twitter - you create an account, follow people, and see posts from things you follow.</p>
<p>But unlike Twitter, the servers are decentralized, meaning nothing like what Elon did to Twitter can happen, because no single person “owns” all of the servers. Or something like that.</p>
</section>
<section id="why" class="level2">
<h2 class="anchored" data-anchor-id="why">Why</h2>
<p>Anyways, I don’t really care much about Mastodon / Twitter / X or whatever. The main reason I made a the BC Child Care Bot was so that I could help my wife find day care vacancies for my son. And after struggling with deployment challenges in <a href="">my previous project</a>, I was interested in CICD and other cool things you can do with github actions.</p>
</section>
<section id="how" class="level2">
<h2 class="anchored" data-anchor-id="how">How</h2>
<section id="github-actions" class="level3">
<h3 class="anchored" data-anchor-id="github-actions">Github Actions</h3>
<p>I followed <a href="https://github.com/matt-dray/londonmapbot">this post</a> closely to learn how to make my own workflow. Essentially it uses github actions to run an R script in the github repository on a daily basis (a cron job).</p>
<p>This is the section that configures the cron job. I also set it up so that on a certain branch named “test”, the script will run. I use this for testing that the workflow works, without having to change the cron schedule everytime.</p>
<pre><code>on:
  push:
    branches: ['test'] # push to this branch to test toots
  schedule:
    - cron: '41 15 * * *'  # trigger at 3pm UTC  every day</code></pre>
<p>The other necessary component is to add mastdon API token to github repository as a “github secret”. Then in the workflow, the token is used with the following syntax:</p>
<pre><code>${{ secrets.RTOOT_DEFAULT_TOKEN}}</code></pre>
</section>
<section id="yay-for-open-source" class="level3">
<h3 class="anchored" data-anchor-id="yay-for-open-source">Yay for open source</h3>
<p>The last component is making the R script to: pull data, identify NEW vacancies, create a tweet / toot to send.</p>
<p>I pulled data from <a href="https://catalogue.data.gov.bc.ca/dataset/child-care-map-data/resource/9a9f14e1-03ea-4a11-936a-6e77b15eeb39">BC gov’s open data portal</a>, and figured out a way to ID new vacancies. Then, a message is crafted accounting for the character limits (500) for mastodon toots.</p>
<p>Actually the character limit is quite restrictive. Every day there can be 50-150 new vacancies over BC, depending on child care age group. But we only have 1 child (thank) so currently the bot only reports facilities with vacancy for children aged &lt;36 months.</p>
<p>Every day this dataset is updated at this URL. The whole script depends on whether this URL stays the same. If it changes, the bot will stop working. Fingers crossed!</p>


</section>
</section>

<script data-goatcounter="https://victor2wy.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script> ]]></description>
  <category>R</category>
  <category>shiny</category>
  <guid>https://victoryuan.com/posts/2024-06-12-making-a-twitter-bot-in-the-year-2024/</guid>
  <pubDate>Wed, 12 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Quickly reading 1 gene at a time from single cell data</title>
  <dc:creator>Victor Yuan</dc:creator>
  <link>https://victoryuan.com/posts/2024-02-24-read-1-gene-from-single-cell/</link>
  <description><![CDATA[ 




<p><em>“Can you check gene x for me?”</em> says every scientist I ever did RNAseq analysis for.</p>
<p>This is a port from my old website so formatting is not great.</p>
<iframe src="../../posts/2024-02-24-read-1-gene-from-single-cell/index.en.html" style="width:100%; height:600px; overflow:auto;">
</iframe>



<script data-goatcounter="https://victor2wy.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script> ]]></description>
  <category>R</category>
  <category>bioinformatics</category>
  <guid>https://victoryuan.com/posts/2024-02-24-read-1-gene-from-single-cell/</guid>
  <pubDate>Sat, 24 Feb 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
