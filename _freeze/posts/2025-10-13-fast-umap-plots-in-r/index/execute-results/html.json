{
  "hash": "b4f6868dd2e930bc8cf278c74756adc3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Speeding up UMAP plots for single cell gene expression analysis\"\nformat: \n  html: \n    fig-width: 7\n    fig-height: 5\n    fig-dpi: 100\n    code-fold: true\neditor_options: \n  chunk_output_type: console\ncategories:\n  - R\n  - data visualization\n  - bioinformatics\ndraft: true\n---\n\nAnalyzing single cell data often requires visualizing thousands to millions of data point on a graph. Current R packages such as `Seurat::DimPlot` are limited by long plotting times, impeding efficient exploratory analysis. \n\nFor example, this is how long it takes to visualize 10 genes on a 14,000 single cell RNAseq (scRNAseq) dataset. \n\n::: {.hidden .unlisted}\n\n# Setup \n\n## Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(bench)\nlibrary(here)\nlibrary(purrr)\nlibrary(glue)\nlibrary(gt)\nlibrary(tidyr)\ntheme_custom <- function() {\n  ggplot2::theme_void() +\n    theme(\n      axis.title.y = element_text(angle = 90),\n      axis.title.x = element_text(),\n      panel.border = element_rect(color = \"black\", fill = NA, linewidth = 0.5, linetype = \"solid\"),\n      strip.text.x = element_text(size = rel(1.5)),\n      plot.margin = margin_auto(6, unit = \"pt\")\n    )\n}\nggplot2::theme_set(\n  theme_custom()\n)\n```\n:::\n\n\n## Parameters\n\n## Datasets\n\n### Load seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- readRDS(here(\"posts\", \"2025-10-13-fast-umap-plots-in-r\", \"ifnb.rds\"))\nrownames(seu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"S100A9\"   \"FCER1A\"   \"FCGR3A\"   \"SELL\"     \"CACYBP\"   \"GNLY\"    \n [7] \"CD8A\"     \"CD8B\"     \"IGJ\"      \"PPBP\"     \"CD14\"     \"HLA-DQA1\"\n[13] \"TSPAN13\"  \"GNG11\"    \"GIMAP5\"   \"IL3RA\"    \"FOXP3\"    \"CREM\"    \n[19] \"HBB\"      \"MS4A1\"    \"CD3E\"     \"CD3D\"     \"CD4\"      \"LYZ\"     \n[25] \"HSPH1\"    \"GPR183\"   \"HBA2\"     \"VMO1\"     \"CCL2\"     \"CCL5\"    \n[31] \"NME1\"     \"PRSS57\"   \"CD79A\"    \"NKG7\"     \"MIR155HG\"\n```\n\n\n:::\n\n```{.r .cell-code}\nxy <- FetchData(seu, vars = c(\"umap_1\", \"umap_2\", \"seurat_annotations\", rownames(seu)))\n```\n:::\n\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbnch |> select(expression, min, median, n_itr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  expression               min   median\n  <bch:expr>          <bch:tm> <bch:tm>\n1 Seurat, not sampled    4.12s    4.26s\n```\n\n\n:::\n:::\n\n\nIt takes 4.26315 seconds to plot 10 features with a 14,000 single cell dataset (number of cells = 14,000). This dataset is on the smaller side - considering that single cell datasets often reach the hundreds of thousands, the speed of plotting is a significant hamper on single cell analysis. \n\n# Sampling to speed up plotting \n\nPlotting tens to hundreds of thousands of cells is likely not completely necessary. We can explore whether plotting a sample of the dataset will be sufficient to maintain a faithful representation of the entire dataset, while improving speed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_sampled <- seu[, sample(1:ncol(seu), size = 0.1 * ncol(seu))]\nplots <- list(\n  seu |> Seurat::FeaturePlot(features = c(\"CD8A\", \"FOXP3\"), order = TRUE) & coord_equal(),\n  seu_sampled |> Seurat::FeaturePlot(features = c(\"CD8A\", \"FOXP3\"), order = TRUE) & coord_equal()\n)\n(plots[[1]] & labs(subtitle = \"Not sampled\")) /\n  (plots[[2]] & labs(subtitle = \"Sampled 10%\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(bnch, bnch_sampled) |> select(expression, min, median, n_itr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  expression                         min   median\n  <bch:expr>                    <bch:tm> <bch:tm>\n1 Seurat, not sampled              4.12s    4.26s\n2 Seurat, sampled 10% (n=1,400)    2.77s    2.97s\n```\n\n\n:::\n:::\n\n\nThe improvement in speed is also slightly better, but still very slow. `Seurat::FeaturePlot` may have some processes that are slow. Let's try a naive solution:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_plot(seu_sampled, features)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=700}\n:::\n\n```{.r .cell-code}\nbnch_naive |> select(expression, min, median, n_itr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  expression      min   median\n  <bch:expr> <bch:tm> <bch:tm>\n1 naive         982ms    1.13s\n```\n\n\n:::\n:::\n\n\n\n\nThe naive plot takes 1.13 seconds or 3.76x faster.\n\nBut there are drawbacks with this naive solution. Notably it's missing some of features that `Seurat` smartly incorporates:\n\n- point sizing based on number of points. When plotting larger datasets, the optimal point size is smaller to avoid overplotting\n- Hard to see sparsely and low-expressed genes e.g. FOXP3 and CD4. This is introduced by the combined color scale, mapping low/highe xpression to one common color scale across all genes. Seurat maintains an independent color scale for each gene\n\nLet's see if we can address these shortcomings without trading off speed.\n\n# Point sizing\n\n`Seurat::FeaturePlot` uses a simple formula to calculate point size in relation to number of cells. But it doesn't take into account when visualizing multiple features. \n\nHere we adjust this over total number of cells * total number of features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_plot2 <- function(seu, features, ptsize = NULL) {\n  expr_long <- extract_and_pivot(seu, features)\n\n  # From Seurat:\n  if (is.null(ptsize)) {\n    ptsize <- min(3000 / nrow(expr_long), 1)\n  }\n\n  p <- expr_long |>\n    filter(.abundance > 0) |>\n    ggplot(aes(x = umap_1, y = umap_2)) +\n    geom_point(\n      data = expr_long |> filter(.abundance == 0),\n      size = ptsize,\n      color = \"lightgrey\"\n    ) +\n    geom_point(\n      size = ptsize,\n      aes(color = .abundance)\n    ) +\n    scale_color_viridis_c() +\n    facet_wrap(vars(feature))\n  p\n}\n```\n:::\n\n\n::: {.panel-tabset .nav-pills}\n\n## number of cells (Seurat)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_plot2(seu_sampled, features, ptsize = min(1583 / nrow(seu_sampled), 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=700}\n:::\n:::\n\n\n## number of cells * features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_plot2(seu_sampled, features)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=700}\n:::\n:::\n\n\n:::\n\n\n# Lowly expressed genes\n\nTo address missing lowly expressed genes when sampling, we can write some logic where when a gene is sparsely expressed, we keep all cells.\n\nThe question is at what level of sparseness do we decide to keep all cells.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepare_plot_data <- function(seu, features, .n = 1400) {\n  seu_expr <- FetchData(seu, vars = c(\"umap_1\", \"umap_2\", features))\n  background_data <- seu_expr[, c(\"umap_1\", \"umap_2\")] |>\n    slice_sample(n = .n)\n\n  seu_expr_long <- seu_expr |>\n    pivot_longer(\n      all_of(features),\n      names_to = \"feature\",\n      values_to = \".abundance\"\n    ) |>\n    filter(.abundance != 0) |>\n    slice_sample(by = feature, n = .n / 2)\n\n  return(\n    list(\n      background = background_data, abundance = seu_expr_long\n    )\n  )\n}\n\nnaive_plot3 <- function(seu, features, ptsize = NULL, .n = 1400) {\n  plot_data <- prepare_plot_data(seu, features, .n = .n)\n\n  # From Seurat:\n  if (is.null(ptsize)) {\n    ptsize <- min(3000 / nrow(plot_data$abundance), 1)\n  }\n  plot_data$background |>\n    ggplot(aes(x = umap_1, y = umap_2)) +\n    geom_point(size = ptsize, color = \"grey\") +\n    geom_point(\n      data = plot_data$abundance,\n      size = ptsize,\n      aes(color = .abundance)\n    ) +\n    scale_color_viridis_c() +\n    facet_wrap(vars(feature))\n}\n\nnaive_plot3(seu, features)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=700}\n:::\n:::\n\n\nWe implemented some conditional sampling based on the total number of expressed genes, and the desired sample size. All cells are retained for genes that have less than half of the desired sample (1400/2 = 700). This results in a visualization where highly expressed genes are sampled proportionally, and sparsely expressed genes are retained. This can be helpful in identifying cells that express these lowly expressed genes.\n\nHere are the exact number of cells sampled for each gene:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  with_sampling = prepare_plot_data(seu, features, .n = 1400)$abundance,\n  without_sampling = prepare_plot_data(seu, features, .n = 14000)$abundance\n) |>\n  purrr::map(~ count(.x, feature)) |>\n  bind_rows(.id = \"type\") |>\n  pivot_wider(\n    names_from = type, values_from = n\n  ) |>\n  gt() |>\n  grand_summary_rows(-feature, fns = list(sum ~ sum(.)))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"merkqscunw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#merkqscunw table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#merkqscunw thead, #merkqscunw tbody, #merkqscunw tfoot, #merkqscunw tr, #merkqscunw td, #merkqscunw th {\n  border-style: none;\n}\n\n#merkqscunw p {\n  margin: 0;\n  padding: 0;\n}\n\n#merkqscunw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#merkqscunw .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#merkqscunw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#merkqscunw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#merkqscunw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#merkqscunw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#merkqscunw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#merkqscunw .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#merkqscunw .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#merkqscunw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#merkqscunw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#merkqscunw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#merkqscunw .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#merkqscunw .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#merkqscunw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#merkqscunw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#merkqscunw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#merkqscunw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#merkqscunw .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#merkqscunw .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#merkqscunw .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#merkqscunw .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#merkqscunw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#merkqscunw .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#merkqscunw .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#merkqscunw .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#merkqscunw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#merkqscunw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#merkqscunw .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#merkqscunw .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#merkqscunw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#merkqscunw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#merkqscunw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#merkqscunw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#merkqscunw .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#merkqscunw .gt_left {\n  text-align: left;\n}\n\n#merkqscunw .gt_center {\n  text-align: center;\n}\n\n#merkqscunw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#merkqscunw .gt_font_normal {\n  font-weight: normal;\n}\n\n#merkqscunw .gt_font_bold {\n  font-weight: bold;\n}\n\n#merkqscunw .gt_font_italic {\n  font-style: italic;\n}\n\n#merkqscunw .gt_super {\n  font-size: 65%;\n}\n\n#merkqscunw .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#merkqscunw .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#merkqscunw .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#merkqscunw .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#merkqscunw .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#merkqscunw .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#merkqscunw .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#merkqscunw .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#merkqscunw div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a::stub\"></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"feature\">feature</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"with_sampling\">with_sampling</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"without_sampling\">without_sampling</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><th id=\"stub_1_1\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_1 feature\" class=\"gt_row gt_left\">CD14</td>\n<td headers=\"stub_1_1 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_1 without_sampling\" class=\"gt_row gt_right\">2888</td></tr>\n    <tr><th id=\"stub_1_2\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_2 feature\" class=\"gt_row gt_left\">CD3E</td>\n<td headers=\"stub_1_2 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_2 without_sampling\" class=\"gt_row gt_right\">2198</td></tr>\n    <tr><th id=\"stub_1_3\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_3 feature\" class=\"gt_row gt_left\">CD4</td>\n<td headers=\"stub_1_3 with_sampling\" class=\"gt_row gt_right\">251</td>\n<td headers=\"stub_1_3 without_sampling\" class=\"gt_row gt_right\">251</td></tr>\n    <tr><th id=\"stub_1_4\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_4 feature\" class=\"gt_row gt_left\">CD8B</td>\n<td headers=\"stub_1_4 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_4 without_sampling\" class=\"gt_row gt_right\">925</td></tr>\n    <tr><th id=\"stub_1_5\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_5 feature\" class=\"gt_row gt_left\">FCER1A</td>\n<td headers=\"stub_1_5 with_sampling\" class=\"gt_row gt_right\">101</td>\n<td headers=\"stub_1_5 without_sampling\" class=\"gt_row gt_right\">101</td></tr>\n    <tr><th id=\"stub_1_6\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_6 feature\" class=\"gt_row gt_left\">FOXP3</td>\n<td headers=\"stub_1_6 with_sampling\" class=\"gt_row gt_right\">13</td>\n<td headers=\"stub_1_6 without_sampling\" class=\"gt_row gt_right\">13</td></tr>\n    <tr><th id=\"stub_1_7\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_7 feature\" class=\"gt_row gt_left\">GNLY</td>\n<td headers=\"stub_1_7 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_7 without_sampling\" class=\"gt_row gt_right\">1299</td></tr>\n    <tr><th id=\"stub_1_8\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_8 feature\" class=\"gt_row gt_left\">LYZ</td>\n<td headers=\"stub_1_8 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_8 without_sampling\" class=\"gt_row gt_right\">4973</td></tr>\n    <tr><th id=\"stub_1_9\" scope=\"row\" class=\"gt_row gt_left gt_stub\"></th>\n<td headers=\"stub_1_9 feature\" class=\"gt_row gt_left\">MS4A1</td>\n<td headers=\"stub_1_9 with_sampling\" class=\"gt_row gt_right\">700</td>\n<td headers=\"stub_1_9 without_sampling\" class=\"gt_row gt_right\">742</td></tr>\n    <tr><th id=\"grand_summary_stub_1\" scope=\"row\" class=\"gt_row gt_left gt_stub gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\">sum</th>\n<td headers=\"grand_summary_stub_1 feature\" class=\"gt_row gt_left gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\">—</td>\n<td headers=\"grand_summary_stub_1 with_sampling\" class=\"gt_row gt_right gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\">4565</td>\n<td headers=\"grand_summary_stub_1 without_sampling\" class=\"gt_row gt_right gt_grand_summary_row gt_first_grand_summary_row gt_last_summary_row\">13390</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n# Final comparison\n\nFinally, let's compare our solution with `Seurat::FeaturePlot` over 10 genes for 14000 cells:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbnch_final <- bench::mark(\n  `Seurat, not sampled` = Seurat::FeaturePlot(seu, features = features) |> plot(),\n  `Custom solution` = naive_plot3(seu, features) |> plot(),\n  memory = FALSE,\n  check = FALSE,\n  iterations = 4\n) |> select(expression, min, median, n_itr)\n```\n:::\n\n\n\nWe improved the speed by 3.76 times for a 14,000 cell dataset. I expect relative performance to be even greater for larger single cell datasets, since our sampling approach plots the same number of points regardless of dataset size.\n\nWe accomplish while improving the ability to detect lowly expressed / sparse genes. See the results yourself:\n\n::: {.panel-tabset .nav-pills}\n\n## Seurat::FeaturePlot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::FeaturePlot(seu, features = features)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=1000}\n:::\n:::\n\n\n## Custom Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaive_plot3(seu, features)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=1000}\n:::\n:::\n\n\n:::\n\nThe drawback of this increased sensitivity is there is more noise. Especially for the higher expressed genes, there's a lot of lowly expressed cells that that appear highlighted, which might be distracting.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}