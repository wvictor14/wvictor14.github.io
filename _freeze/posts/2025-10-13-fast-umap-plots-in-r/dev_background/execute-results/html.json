{
  "hash": "414af9b6959a9c27eafc80d4cd90a598",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"dev_background\"\nformat: \n  html: \n    fig-width: 7\n    fig-height: 5\n    fig-dpi: 150\n    code-fold: true\neditor_options: \n  chunk_output_type: console\n---\n\n# Setup\n\n## Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(bench)\nlibrary(ggrastr)\nlibrary(here)\nlibrary(scattermore)\nlibrary(purrr)\nlibrary(glue)\nggplot2::theme_set(\n  ggplot2::theme_void() +\n    theme(\n      panel.border = element_rect(color = 'black', fill = NA, size = 0.5, linetype = \"solid\"),\n      strip.text.x = element_text(size = rel(1.2)),\n      plot.margin = margin_auto(6, unit = \"pt\"),\n      legend.position = 'none',\n      palette.colour.discrete = paletteer::paletteer_d(\"ggsci::default_ucscgb\", n = 14) |> as.character()\n    ) \n)\n```\n:::\n\n\n## Parameters\n\n## Datasets\n\n### Load seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- readRDS( here('ifnb.rds'))\nncol(seu)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13999\n```\n\n\n:::\n:::\n\n\n# Background\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- FetchData(seu, vars = c('umap_1', 'umap_2', 'seurat_annotations'))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- xy |> ggplot(aes(umap_1, umap_2, color = seurat_annotations)) \nlist(\n  base + geom_point(size = 0.1) + labs(title = 'geom_point'),\n  base + geom_scattermore() + labs(title = 'scattermore'),\n  base + rasterize(geom_point(size = 0.1)) + labs(title = 'ggrastr')\n) |> \n  patchwork::wrap_plots() & coord_equal()\n```\n\n::: {.cell-output-display}\n![](dev_background_files/figure-html/unnamed-chunk-4-1.png){width=1050}\n:::\n:::\n\n\n# Sampling\n\n## Uniform\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up plotting function\nscatter <- function(df) {\n  df |> \n    ggplot(aes(umap_1, umap_2)) +\n    geom_point(size = 0.4) +\n    coord_equal()\n}\n# usage: xy |> scatter()\n\n# set up sampling n\nsamples <- c(100, 300, 1000, 3000, 10000, nrow(xy))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuniform <- samples |> map(\n  ~xy |> dplyr::slice_sample(n = .x) |> scatter() + labs(title = glue('n={.x}'))\n)\nwrap_plots(uniform)\n```\n\n::: {.cell-output-display}\n![](dev_background_files/figure-html/unnamed-chunk-6-1.png){width=1050}\n:::\n:::\n\n\n## Density sampler\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'MASS'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:patchwork':\n\n    area\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n\n\n:::\n\n```{.r .cell-code}\n# get probability estimates using kde2d, and map back to points\ncalculate_density <- function(x, y) {\n  \n  dens <- MASS::kde2d(x, y, n = 400) \n  \n  #image(dens)\n  ix <- base::findInterval(x, dens$x)\n  iy <- base::findInterval(y, dens$y)\n  ii <- cbind(ix, iy)\n  \n  out <- dens$z[ii]\n  out <- base::pmax(out, .Machine$double.eps, na.rm = TRUE)\n  out\n}\nxy <- xy |> \n  as_tibble() |> \n  mutate(inverted_density = (1-calculate_density(umap_1, umap_2))^2)\n\nxy |> summarize(.by = seurat_annotations, median(inverted_density))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 Ã— 2\n   seurat_annotations `median(inverted_density)`\n   <fct>                                   <dbl>\n 1 CD14 Mono                               0.977\n 2 pDC                                     0.997\n 3 CD4 Memory T                            0.979\n 4 T activated                             0.993\n 5 CD4 Naive T                             0.977\n 6 CD8 T                                   0.989\n 7 Mk                                      0.996\n 8 B Activated                             0.991\n 9 B                                       0.985\n10 DC                                      0.994\n11 CD16 Mono                               0.989\n12 NK                                      0.986\n13 Eryth                                   0.983\n```\n\n\n:::\n\n```{.r .cell-code}\n# sample by 1 - density to sample less dense space more than high dense space\nprobability_based <- samples |> map(\n  ~xy |> \n    dplyr::slice_sample(n = .x, weight_by = inverted_density) |> \n    scatter() + labs(title = glue('n={.x}'))\n)\nwrap_plots(probability_based)\n```\n\n::: {.cell-output-display}\n![](dev_background_files/figure-html/unnamed-chunk-7-1.png){width=1050}\n:::\n:::\n\n\nLet's take a closer look at the n=1000 case, to see the differences\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuniform[[3]] + probability_based[[3]]\n```\n\n::: {.cell-output-display}\n![](dev_background_files/figure-html/unnamed-chunk-8-1.png){width=1050}\n:::\n:::\n\n\n## Grid sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_grid <- function(df, x, y, n) {\n  \n  dim1 <- sqrt(n) \n  \n  df |> \n    mutate(x_cut = cut({{x}}, dim1), y_cut = cut({{y}}, dim1)) |> \n    group_by(x_cut, y_cut) |> \n    sample_n(1) |> \n    ungroup() \n}\n\ngrid <- samples |> map(\n  ~xy |> \n    sample_grid(x = umap_1, y = umap_2, n = .x) |> \n    scatter() + labs(title = glue('n={.x}'))\n)\nwrap_plots(grid)\n```\n\n::: {.cell-output-display}\n![](dev_background_files/figure-html/unnamed-chunk-9-1.png){width=1050}\n:::\n:::\n\n",
    "supporting": [
      "dev_background_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}