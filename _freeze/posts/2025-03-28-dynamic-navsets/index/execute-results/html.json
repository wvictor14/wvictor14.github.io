{
  "hash": "9d75f03df675bd2f7516ead4085e39ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Programmatically creating tabsets in R\"\nformat:\n  html:\n    toc: true\n    resources: \n      - shinylive-sw.js\ndate: 2025-03-28\neditor_options: \n  chunk_output_type: console\nfilters:\n  - shinylive\ncategories:\n  - R\n  - quarto\n---\n\n![](shinylive.gif)\n\n# Introduction\n\nI recently was working on a web app and encountered a situation where I wanted \nto create tabs based on some variable in a data frame. The tab names and content\nwould change when the data was subsetted or modified from other functions in the \napp. \n\nHere is how to do that in shiny, using the [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) dataset as an example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(shiny)\nlibrary(glue)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\ndata(penguins)\nggplot2::theme_set(theme_bw(15))\n```\n:::\n\n\n# Setting up the UI\n\nFirst I set up the ui with two components:\n\n- an input component that filters the dataset, and\n- a `uiOutput` component for the dynamic tabs which will be rendered server-side\n\nThe filter component is just to demonstrate how the tabsets are generated based\non different subsetted versions of the underlying data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- bslib::page_fillable(\n  radioButtons(\n    \"select_species\",\n    \"Filter by species\",\n    choices = unique(penguins$species)\n  ),\n  shiny::uiOutput(\"dynamic_navset_card\")\n)\n```\n:::\n\n\n## Render the tab names and content server-side\n\nNext is the server code. The server code does 3 things:\n\n1. filter the penguins dataset `penguin_filtered`, based on the radio buttons\n2. dynamically render the ui component based on the `island` column in the \nfilter penguin dataset i.e. `penguin_filtered$island`\n3. Create content for each tab, here I chose a histogram over year. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(session, input, output) {\n  # 1. filter by species\n  penguins_filtered <- reactive({\n    req(input$select_species)\n    penguins |> filter(species == input$select_species)\n  })\n\n  # 2. create the ui based on the `island` column\n  output$dynamic_navset_card <- renderUI({\n    nav_items <- unique(penguins_filtered()$island) |> purrr::map(\n      ~ nav_panel(\n        title = .x,\n        plotOutput(glue(\"plot_{.x}\"))\n      )\n    )\n    navset_card_pill(!!!nav_items)\n  })\n\n  # 3. create the plots\n  observe({\n    walk(\n      unique(penguins_filtered()$island),\n      function(x) {\n        id <- glue(\"plot_{x}\")\n        output[[id]] <- renderPlot({\n          penguins_filtered() |>\n            filter(island == x) |>\n            ggplot(aes(x = year)) +\n            geom_histogram(stat = \"count\") +\n            labs(title = glue(\"Number of penguins by year for island {x}\"))\n        })\n      }\n    )\n  })\n}\n```\n:::\n\n\nThe tricky part is figuring out how to dynamically assign the output ids. Here,\nI programmatically create the `id`s and then assign them content (plots) based\non the relevant subset of data.\n\n# Shinylive app\n\nHere is a demonstration with a shinylive app\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(shiny)\nlibrary(glue)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\ndata(penguins)\nggplot2::theme_set(theme_bw(15))\n\nui <- bslib::page_sidebar(\n  sidebar = sidebar(\n    radioButtons(\n      \"select_species\",\n      \"Filter by species\",\n      choices = unique(penguins$species)\n    )\n  ),\n  shiny::uiOutput(\"dynamic_navset_card\")\n)\n\nserver <- function(session, input, output) {\n  # 1. filter by species\n  penguins_filtered <- reactive({\n    req(input$select_species)\n    penguins |> filter(species == input$select_species)\n  })\n\n  # 2. create the ui based on the `island` column\n  output$dynamic_navset_card <- renderUI({\n    nav_items <- unique(penguins_filtered()$island) |> purrr::map(\n      ~ nav_panel(\n        title = .x,\n        plotOutput(glue(\"plot_{.x}\"), width = \"80%\")\n      )\n    )\n    navset_card_pill(!!!nav_items, height = 360)\n  })\n\n  # 3. create the plots\n  observe({\n    walk(\n      unique(penguins_filtered()$island),\n      function(x) {\n        id <- glue(\"plot_{x}\")\n        output[[id]] <- renderPlot({\n          penguins_filtered() |>\n            filter(island == x) |>\n            ggplot(aes(x = year)) +\n            geom_histogram(stat = \"count\") +\n            labs(title = glue(\"Number of penguins by year for island {x}\"))\n        })\n      }\n    )\n  })\n}\nshiny::shinyApp(ui, server)\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}